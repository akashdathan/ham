TK_SRC_WORK_DIR ?= $(WORK) ;

# tkImportDoCopy TKIMPORT_TARGET : SRCPATH : DIR
rule tkImportDoCopy {
  if ! [ FExists $(2) ] {
    local destFile = [ FDirName $(3) $(2:BS) ] ;
    if [ FExists $(destFile) ] {
      ECHO "W/Import: cannot import, using existing $(destFile)." ;
      return $(destFile) ;
    }
    else {
      EXIT "F/Cannot import $(2) to $(3) !" ;
    }
  }
  local p = [ tkFile $(2:BS) : $(2) : $(3) ] ;
  DEPENDS $(1) : $(p) ;
  DEPENDS tkimport : $(p) ;
  DEPENDS pass1 : tkimport ;
  return $(p) ;
}

rule tkImportGetExePath {
  local buildExt = $(3) ;
  if ! $(buildExt) {
    buildExt = $(BUILDEXT) ;
  }
  local srcTkDirBin = [ FDirName $(TK_SRC_WORK_DIR) $(<) bin $(BIN_LOA) ] ;
  local srcPath = [ FDirName $(srcTkDirBin) $(>)_$(buildExt)$(SUFEXE) ] ;
  return $(srcPath) ;
}

rule tkImportGetDllPath {
  local buildExt = $(3) ;
  if ! $(buildExt) {
    buildExt = $(BUILDEXT) ;
  }
  local srcTkDirBin = [ FDirName $(TK_SRC_WORK_DIR) $(<) bin $(BIN_LOA) ] ;
  local srcPath = [ FDirName $(srcTkDirBin) $(>)_$(buildExt)$(SUFDLL) ] ;
  return $(srcPath) ;
}

rule tkImportGetJarPath {
  local buildExt = $(3) ;
  if ! $(buildExt) {
    buildExt = $(BUILDEXT) ;
  }
  local srcTkDirJar = [ FDirName $(TK_SRC_WORK_DIR) $(<) libs jars ] ;
  local srcPath = [ FDirName $(srcTkDirJar) $(>).jar ] ;
  return $(srcPath) ;
}

rule tkImportGetLibPath {
  local buildExt = $(3) ;
  if ! $(buildExt) {
    buildExt = $(BUILDEXT) ;
  }
  local srcTkDirLib = [ FDirName $(TK_SRC_WORK_DIR) $(<) libs $(LIBS_LOA) ] ;
  local srcPath = [ FDirName $(srcTkDirLib) $(>)_$(buildExt)$(SUFLIB) ] ;
  return $(srcPath) ;
}

# tkImportExe SrcToolkit : ExeName : BUILDEXT ;
# imports an executable program from another toolkit
rule tkImportExe {
  local srcPath = [ tkImportGetExePath $(<) : $(>) : $(3) ] ;
  local r = [ tkImportDoCopy tkimport_exe
  : $(srcPath)
  : $(TK_DIR_BIN) ] ;
  DEPENDS $(>) : $(r) ;

  # Has a .pdb attached to it ?
  if [ FExists $(srcPath:S=.pdb) ] {
    local r [ tkImportDoCopy tkimport_exe
    : $(srcPath:S=.pdb)
    : $(TK_DIR_BIN) ] ;
    DEPENDS $(>) : $(r) ;
  }
}

# tkImportDll SrcToolkit : DllName : BUILDEXT ;
# imports a dll from another toolkit
rule tkImportDll {
  local srcPath = [ tkImportGetDllPath $(<) : $(>) : $(3) ] ;
  local r = [ tkImportDoCopy tkimport_dll
  : $(srcPath)
  : $(TK_DIR_BIN) ] ;
  DEPENDS $(>) : $(r) ;
  redistAddFile $(r) : modules ;

  # Has a .pdb attached to it ?
  if [ FExists $(srcPath:S=.pdb) ] {
    local r [ tkImportDoCopy tkimport_dll
    : $(srcPath:S=.pdb)
    : $(TK_DIR_BIN) ] ;
    DEPENDS $(>) : $(r) ;
  }

  # Has an implib ?
  local libPath = [ tkImportGetLibPath $(<) : $(>) : $(3) ] ;
  if [ FExists $(libPath) ] {
    local r = [ tkImportDoCopy tkimport_dll
    : $(libPath)
    : $(TK_DIR_LIBS) ] ;
    DEPENDS $(>) : $(r) ;
  }
}

# tkImportLib SrcToolkit : LibName : BUILDEXT ;
# imports a lib from another toolkit
rule tkImportLib {
  local srcPath = [ tkImportGetLibPath $(<) : $(>) : $(3) ] ;
  local r = [ tkImportDoCopy tkimport_lib
  : $(srcPath)
  : $(TK_DIR_LIBS) ] ;
  DEPENDS $(>) : $(r) ;
}

# tkImportJar SrcToolkit : JarName : BUILDEXT ;
# imports a jar from another toolkit
rule tkImportJar {
  if $(BUILD_JNI) = 1 {
    local srcPath = [ tkImportGetJarPath $(<) : $(>) : $(3) ] ;
    local r = [ tkImportDoCopy tkimport_jar
    : $(srcPath)
    : $(TK_DIR_JARS) ] ;
    DEPENDS $(>) : $(r) ;
    redistAddFile $(r) : jar ;
  }
}

# tkImportJar SrcToolkit : BaseName ;
rule tkImportDllAndJar {
  tkImportDll $(<) : $(>) ;
  tkImportJar $(<) : $(>)_jvm ;
}
