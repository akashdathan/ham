STRICT_ALIASING_FLAGS = -fno-strict-aliasing ;

CLANG_CC_ARGS +=
  -Wno-return-type-c-linkage
  -Wno-switch
  -Wno-#pragma-messages
  -Wno-unused-value
;
CLANG_CPP_ARGS +=
  -std=c++11
  -Wno-c++11-narrowing
;

### OSX ###
if $(OSX) {
  CLANG_CC_ARGS += -fno-common ;
  if $(OSPLAT) = X64 {
    CLANG_CC_ARGS += -m64 ;
    LINKFLAGS += -m64 ;
  }
  else if $(OSPLAT) = X86 {
    CLANG_CC_ARGS += -m32 ;
    LINKFLAGS += -m32 ;
  }
  LINKLIBS += -framework Foundation -framework CoreServices -framework Carbon -framework Cocoa -framework IOKit -framework OpenGL -framework AGL -lstdc++ -lpthread -ldl ;
}

CCFLAGS   += $(CLANG_CC_ARGS) ;
C++FLAGS  += $(CLANG_CC_ARGS) $(CLANG_CPP_ARGS) ;

if $(FLYMAKE) = 1 {
  CLANG_DBG_ARGS = -O0 -fsyntax-check $(STRICT_ALIASING_FLAGS) ;
  # CLANG_DBG_ARGS = -ggdb -O0 $(STRICT_ALIASING_FLAGS) ;
  CLANG_OPT_ARGS = $(CLANG_DBG_ARGS) ;
}
else {
  ### "Debug" (da) build flags ###
  CLANG_DBG_ARGS = -ggdb -O0 $(STRICT_ALIASING_FLAGS) ;
  ### Optimized (ra) build flags ###
  CLANG_OPT_ARGS = -O2 $(STRICT_ALIASING_FLAGS) ;
}

### Link flags ###
LINKLIBS += ;

rule tkCC++Build
{
  local t = $(<) ;
  local strOpt = "" ;
  # Set the debug infos generation
  # Set the optimization flags
  if $(DEBUG) = 1 {
    PKGOPTIM += $(CLANG_DBG_ARGS) ;
    strOpt += "(DebugOnly) " ;
  }
  # Set debug-only flags
  else {
    PKGOPTIM += $(CLANG_OPT_ARGS) ;
    strOpt += "(Optimized) " ;
  }
  logVerbose "- CC++Build: " $(strOpt) ;
}

rule tkC++Exceptions {
  ObjectC++Flags $(<) : -fexceptions ;
}
rule tkNoC++Exceptions {
  ObjectC++Flags $(<) : -fno-exceptions ;
  # Needed to disable exception usage in the standard C++ library
  ObjectDefines $(<) : _HAS_EXCEPTIONS=0 ;
}

rule tkC++RTTI {
  ObjectC++Flags $(<) : -frtti ;
}
rule tkNoC++RTTI {
  ObjectC++Flags $(<) : -fno-rtti ;
}

rule tkCC++Lint {
}
