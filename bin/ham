#!/bin/bash
PREV_PATH=${PATH}
if [[ -z "$HAM_HOME" ]]; then
    export HAM_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
    echo "W/HAM_HOME not set, set to:" $HAM_HOME
fi
. "$HAM_HOME/bin/ham-bash-setenv.sh"
export PATH=${PREV_PATH}:${PATH}

case $HAM_OS in
    NT*)
        HAM_CMD="$HAM_HOME/bin/nt-x86/ham"
        ;;
    OSX)
        HAM_CMD="$HAM_HOME/bin/osx-x86/ham"
        ;;
    LINUX)
        HAM_CMD="$HAM_HOME/bin/lin-x64/ham"
        ;;
    *)
        echo "W/ham-bash-setenv.sh: Unknown HAM_OS: $HAM_OS"
        ;;
esac

# the help
usage() {
    echo "usage: ham [ options ] targets..."
    echo "version:" `"${HAM_CMD}" -v`
    echo ""
    echo "ham launch script:"
    echo "-h             This help message"
    echo "-v             Print ham's version"
    echo "-q             Sets HAM_NO_VER_CHECK=1"
    echo "-T toolset     Add a toolset to import"
    echo "               (can be specified multiple times)"
    echo "-D directory   Add a toolkit to build - the toolkit should be in $WORK"
    echo "               (can be specified multiple times)"
    echo "--             Following parameters will be passed to ham directly"
    echo ""
    echo "ham process:"
    "${HAM_CMD}" -? | grep "^[- ]"
    echo ""
    echo "example:"
    echo "  # Build all in the release build"
    echo "  ham BUILD=ra all"
    echo "  # Build all in the current toolkit, displaying all the commands"
    echo "  ham -T defaultj -- -dx all"
    echo "  # Build all in the niLang & niSDK toolkits"
    echo "  ham -T defaultj -D niLang -D niSDK all"
    echo ""

    if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
        # sourced...
        return 1
    else
        # regular call
        exit 1
    fi
}

# Check that there is at least one argument...
if [ $# = 0 ]; then
    echo "E/No argument specified"
    echo ""
    usage
fi

# process the arguments
_ARG_DIRECTORIES=()
while getopts :T:D:B:vq OPT
do
    case "$OPT" in
        h)
            usage
            ;;
        \?)
            usage
            ;;
        q)
            export HAM_NO_VER_CHECK=1
            ;;
        v)
            "$HAM_CMD" -v
            if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
                return 0
            else
                exit 0
            fi
            ;;
        T)
            _ARG_TOOLSET="$_ARG_TOOLSET $OPTARG"
            # echo "_ARG_TOOLSET:" $_ARG_TOOLSET
            ;;
        D)
            OPTARG=`ham-url dec "$OPTARG"`
            if  [[ "$OPTARG" == ?:/* ]] || [[ "$OPTARG" == /* ]] || [[ "$OPTARG" == .* ]] ;
            then
                # Explicit path
                _ARG_DIRECTORY="$OPTARG/sources/"
                if [[ ! -e "$_ARG_DIRECTORY" ]]; then
                    _ARG_DIRECTORY="$OPTARG"
                    if [[ ! -e "$_ARG_DIRECTORY" ]]; then
                        echo "E/Can't find directory '$_ARG_DIRECTORY'"
                        usage
                    fi
                fi
            else
                # Work App path
                _ARG_DIRECTORY="$WORK/$OPTARG/sources/"
                if [[ ! -e "$_ARG_DIRECTORY" ]]; then
                    _ARG_DIRECTORY="$WORK/$OPTARG/"
                    if [[ ! -e "$_ARG_DIRECTORY" ]]; then
                        echo "E/Can't find directory '$_ARG_DIRECTORY'"
                        usage
                    fi
                fi
            fi
            _ARG_DIRECTORIES+=("$_ARG_DIRECTORY")
            ;;
    esac
done
shift $((OPTIND-1))

if [[ "$_ARG_TOOLSET" != "" ]]; then
    . "$HAM_HOME/bin/ham-bash-setenv.sh"
    . ham-toolset $_ARG_TOOLSET
    errcheck $? ham "Can't setup the '$_ARG_TOOLSET' toolset."
fi

if [[ -z $HAM_TOOLSET ]]; then
    echo "E/No toolset set, you can set one with the -T flag or '. ham-toolset' ..."
    usage
fi

hamIn() {
    export CWD="`pwd`"
    export DIR="$1"
    shift
    if [[ "$CWD" != "$DIR" ]]; then
        pushd "$DIR"
    fi
    echo "I/Ham Command: $HAM_CMD" $*
    "$HAM_CMD" $*
    errcheck $? ham "Build in $DIR failed."
    if [[ "$CWD" != "$DIR" ]]; then
        popd
    fi
}

if [[ "$_ARG_DIRECTORY" != "" ]]; then
    for dir in "${_ARG_DIRECTORIES[@]}"; do
        hamIn "$dir" $*
    done
else
    # find the _build.ham file
    export BUILD_HAM_DIR="`ham-search-build-ham.sh`"
    if [[ -z "$BUILD_HAM_DIR" ]]; then
        echo "E/Can't find _build.ham !"
        if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
        # sourced...
            return 1
        else
        # regular call
            exit 1
        fi
    fi
    hamIn "$BUILD_HAM_DIR" $*
fi
