#!/bin/bash
. "$HAM_HOME/bin/ham-bash-setenv.sh"

GIT_BATCH_DEFAULT_REMOTE=origin
GIT_BATCH_DEFAULT_BRANCH=master

# the help
usage() {
    echo "usage: git-batch [ commands ]"
    echo ""
    echo "  Runs the specified git commands in the specified order."
    echo "  Stops at the first failure."
    echo ""
    echo "commands:"
    echo "  -h             This help message"
    echo "  -d             Fetch all branches (download) from '$GIT_BATCH_DEFAULT_REMOTE' remote"
    echo "  -D remote      Fetch all branches (download) from the specified remote"
    echo "  -e             popd"
    echo "  -E dir         pushd into the specified directory"
    echo "  -f             Fetch all branches (download) from all remotes"
    echo "  -l             Print the last 4 commit messages"
    echo "  -L count       Print the last 'count' commit messages"
    echo "  -m             Fetch & merge (pull) from '$GIT_BATCH_DEFAULT_REMOTE' to '$GIT_BATCH_DEFAULT_BRANCH'"
    echo "  -M remote      Fetch & merge (pull) from the specified remote to '$GIT_BATCH_DEFAULT_BRANCH'"
    echo "  -u             Push all (upload) to '$GIT_BATCH_DEFAULT_REMOTE'"
    echo "  -U remote      Push all (upload) to the specified remote"
    echo "  -s             Status of the repo"
    echo "  -y             Fetch all from '$GIT_BATCH_DEFAULT_REMOTE', merge '$GIT_BATCH_DEFAULT_REMOTE' into '$GIT_BATCH_DEFAULT_BRANCH',"
    echo "                 then push all to '$GIT_BATCH_DEFAULT_REMOTE'. Alias for '-f -m -u'."
    echo ""
    echo "example:"
    echo "  # fetch all from '$GIT_BATCH_DEFAULT_REMOTE', merge '$GIT_BATCH_DEFAULT_REMOTE' into '$GIT_BATCH_DEFAULT_BRANCH',"
    echo "  # then push all to '$GIT_BATCH_DEFAULT_REMOTE'"
    echo "  git-batch -f -m -u"
    echo "  # fetch all from '$GIT_BATCH_DEFAULT_REMOTE', merge '$GIT_BATCH_DEFAULT_REMOTE' into '$GIT_BATCH_DEFAULT_BRANCH',"
    echo "  # then push all to '$GIT_BATCH_DEFAULT_REMOTE'"
    echo "  git-batch -y"
    echo "  # fetch all from '$GIT_BATCH_DEFAULT_REMOTE', merge '$GIT_BATCH_DEFAULT_REMOTE' into '$GIT_BATCH_DEFAULT_BRANCH',"
    echo "  # then push all to '$GIT_BATCH_DEFAULT_REMOTE' and to 'bonobo'"
    echo "  git-batch -f -m -u -U bonobo"
    echo ""

    if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
        # sourced...
        return 1
    else
        # regular call
        exit 1
    fi
}

# Check that there is at least one argument...
if [ $# = 0 ]; then
    echo "E/No argument specified"
    echo ""
    usage
fi

# process the arguments
while getopts "dD:eE:fhlL:mM:uU:sy" OPT
do
    case "$OPT" in
        h)
            usage
            ;;
        \?)
            usage
            ;;
        e)
            CMD="popd"
            ;;
        E)
            CMD="pushd `nativedir $OPTARG`"
            ;;
        s)
            CMD="git status"
            ;;
        d)
            CMD="git fetch $GIT_BATCH_DEFAULT_REMOTE"
            ;;
        D)
            CMD="git fetch --all $OPTARG"
            ;;
        f)
            CMD="git fetch --all"
            ;;
        l)
            CMD="git log -4"
            ;;
        L)
            CMD="git log -${OPTARG}"
            ;;
        u)
            CMD="git push --all $GIT_BATCH_DEFAULT_REMOTE"
            ;;
        U)
            CMD="git push --all $OPTARG"
            ;;
        m)
            CMD="git pull $GIT_BATCH_DEFAULT_REMOTE $GIT_BATCH_DEFAULT_BRANCH"
            ;;
        M)
            CMD="git pull $OPTARG $GIT_BATCH_DEFAULT_BRANCH"
            ;;
        y)
            CMD="git-batch -f -m -u"
            ;;
    esac

    echo "I/$CMD (in `pwd`)"
    $CMD
    errcheck $? git_batch "git-batch error: $CMD (in `pwd`)"
done
